package java8Test;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

public class Java8Map {

	public static void main(String[] args) {
		Map<Integer, String> m = new HashMap<>();
		m.put(1, "aio");
		m.put(2, "bule");

		m.put(4, "sain");
		m.put(42, "sain");
		m.put(53, "gra");
		m.put(13, "all");
		m.put(34, "dur");
		
		
		//iterator the map
		m.entrySet().stream().forEach(System.out::println);
		//m.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue)).forEach(System.out::println);
		System.out.println("---");
		m.entrySet().removeIf(s->s.getKey()==13);
		m.entrySet().forEach(System.out::println);
		/*
		 * m.entrySet().stream().forEach(System.out::println); if (m.containsKey(13)) {
		 * m.remove(13); // System.out.println("the elements remove:"+13); }
		 */
		// System.out.println(m);

		if (m.entrySet().removeIf(s -> s.getKey() == 34)) {
			// System.out.println("34 value is deleted successfully");
		}
		// System.out.println("rest of the value is: "+m);

		// System.out.println("ddf:"+ddf);
		//sort based on value
		System.out.println("--------------------");
		Map<Integer, String> mKV = m.entrySet().stream().sorted(Map.Entry.comparingByValue())
				.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (s1, s2) -> s1, LinkedHashMap::new));
		System.out.println("mKV: " + mKV);

		// mKV.forEach((k,v)->System.out.println("key:"+k+", value: "+v));
		// m.forEach((k, v)->System.out.println("key:"+k+" value:"+v));

		/*
		 * List<Integer> l=Arrays.asList(2,1,2,4,5,6); List<Integer>
		 * ls=l.stream().filter(s->s%2==0).collect(Collectors.toList());
		 * 
		 * System.out.println(ls);
		 */

		ArrayList<String> fruit = new ArrayList<>();
		fruit.add("Apple");
		fruit.add("mango");
		fruit.add("pineapple");
		fruit.add("kiwi");
		// System.out.println("List of fruit-" + fruit);
		fruit.stream().mapToInt(String::length).forEach(System.out::println);

		// lets use map() to convert list of fruit
		List list = fruit.stream().map(s -> s.length()).collect(Collectors.toList());
		 System.out.println("List generated by map-" + list);

		// System.out.println("List generate by mapList-" + list);

		// printing the list
		// System.out.println("List generate by flatMap-" + flatList);
	}

}
